const sugarDensity = 1.59;
const waterDensity = 1;
const alcoholDensity = 0.79;
export class Sugar {
    mass;
    name = 'Sugar';
    abv = 0;
    brix = 100;
    waterVolume = 0;
    waterMass = 0;
    alcoholVolume = 0;
    alcoholMass = 0;
    constructor(mass) {
        this.mass = mass;
    }
    clone() {
        return new Sugar(this.mass);
    }
    get sugarVolume() {
        return this.mass / sugarDensity;
    }
    get volume() {
        return this.sugarVolume;
    }
    get sugarMass() {
        return this.mass;
    }
}
export class Water {
    volume;
    abv = 0;
    brix = 0;
    sugarVolume = 0;
    sugarMass = 0;
    alcoholVolume = 0;
    alcoholMass = 0;
    constructor(volume) {
        this.volume = volume;
    }
    clone() {
        return new Water(this.volume);
    }
    get waterVolume() {
        return this.volume;
    }
    get waterMass() {
        return this.waterVolume * waterDensity;
    }
    get mass() {
        return this.waterMass;
    }
}
export class Ethanol {
    volume;
    abv = 100;
    brix = 0;
    sugarVolume = 0;
    sugarMass = 0;
    waterVolume = 0;
    waterMass = 0;
    constructor(volume) {
        this.volume = volume;
    }
    clone() {
        return new Ethanol(this.volume);
    }
    get alcoholVolume() {
        return this.volume;
    }
    get alcoholMass() {
        return this.alcoholVolume * alcoholDensity;
    }
    get mass() {
        return this.alcoholMass;
    }
}
export class Mixture {
    components;
    constructor(components) {
        this.components = components;
    }
    clone() {
        return new Mixture(Object.fromEntries(Object.entries(this.components).map(([key, component]) => [
            key,
            component.clone(),
        ])));
    }
    get abv() {
        return 100 * this.alcoholVolume / this.volume;
    }
    get brix() {
        return 100 * this.sugarMass / this.mass;
    }
    get volume() {
        return this.sumComponents('volume');
    }
    get waterVolume() {
        return this.sumComponents('waterVolume');
    }
    get waterMass() {
        return this.sumComponents('waterMass');
    }
    get alcoholVolume() {
        return this.sumComponents('alcoholVolume');
    }
    get alcoholMass() {
        return this.sumComponents('alcoholMass');
    }
    get sugarVolume() {
        return this.sumComponents('sugarVolume');
    }
    get sugarMass() {
        return this.sumComponents('sugarMass');
    }
    get mass() {
        return this.sumComponents('mass');
    }
    sumComponents(key) {
        return Object.values(this.components).reduce((sum, component) => sum + component[key], 0);
    }
    analyze(precision = 0) {
        return {
            volume: round(this.volume, precision),
            mass: round(this.mass, precision),
            abv: round(this.abv, precision),
            brix: round(this.brix, precision),
        };
    }
}
function round(value, precision) {
    const factor = 10 ** precision;
    return Math.round(value * factor) / factor;
}
export class Syrup extends Mixture {
    _volume;
    _brix;
    constructor(brix, volume) {
        super({
            water: new Water(0),
            sugar: new Sugar(0),
        });
        this._volume = volume;
        this._brix = brix;
        this.updateComponents();
    }
    clone() {
        return new Syrup(this._volume, this._brix);
    }
    updateComponents() {
        this.components.water = new Water(this._volume * (1 - this._brix / 100));
        this.components.sugar = new Sugar(this._volume * (this._brix / 100));
    }
    get volume() {
        return super.volume;
    }
    set volume(volume) {
        this._volume = volume;
        this.updateComponents();
    }
}
export class Spirit extends Mixture {
    _volume;
    _abv;
    constructor(volume, abv) {
        super({
            water: new Water(0),
            ethanol: new Ethanol(0),
        });
        this._volume = volume;
        this._abv = abv;
        this.updateComponents();
    }
    clone() {
        return new Spirit(this._volume, this._abv);
    }
    updateComponents() {
        this.components.water = new Water(this._volume * (1 - this._abv / 100));
        this.components.ethanol = new Ethanol(this._volume * (this._abv / 100));
    }
    get volume() {
        return super.volume;
    }
    set volume(volume) {
        this._volume = volume;
        this.updateComponents();
    }
}
export function solve(sourceSpirit, targetAbv, targetBrix, sourceSweetenerBrix = 100) {
    if (targetAbv > sourceSpirit.abv) {
        throw new Error(`Target ABV (${targetAbv}) must be less than source ABV (${sourceSpirit.abv})`);
    }
    const volumeAtTargetAbv = sourceSpirit.alcoholVolume / (targetAbv / 100);
    const mixture = new Mixture({
        ethanol: sourceSpirit.components.ethanol.clone(),
        water: new Water(volumeAtTargetAbv * (1 - targetBrix / 100)),
        sugar: new Sugar(volumeAtTargetAbv * (targetBrix / 100)),
    });
    const components = mixture.components;
    let error = 1;
    let iterations = 1000;
    while (error > 0.01 && --iterations > 0) {
        const dError_dAbv = (targetAbv - mixture.abv) / 100;
        const dError_dBrix = (targetBrix - mixture.brix) / 100;
        const { volume, mass } = mixture;
        // is abv is below target, we need less water
        components.water.volume -= volume * dError_dAbv;
        // if brix is below target, we need more sugar
        components.sugar.mass *= 1 + dError_dBrix;
        // if brix is below target, we need less water
        components.water.volume -= mass * dError_dBrix;
        // Ensure component volumes and mass stay within the valid range
        components.ethanol.volume = Math.min(sourceSpirit.alcoholVolume, Math.max(0, components.ethanol.volume));
        components.water.volume = Math.max(0, components.water.volume);
        components.sugar.mass = Math.max(0, components.sugar.mass);
        error = Math.sqrt((mixture.abv - targetAbv) ** 2 + (mixture.brix - targetBrix) ** 2);
    }
    // now convert the volume of ethanol to an equivalent volume of spirit
    const targetSpirit = new Spirit(Math.round(mixture.alcoholVolume / (sourceSpirit.abv / 100)), sourceSpirit.abv);
    const targetSyrup = new Syrup(sourceSweetenerBrix, Math.round(100 * mixture.sugarMass / sourceSweetenerBrix));
    const targetWater = new Water(Math.round(mixture.waterVolume - targetSyrup.waterVolume - targetSpirit.waterVolume));
    const output = new Mixture({
        spirit: targetSpirit,
        syrup: targetSyrup,
        water: targetWater,
    });
    return {
        mixture: output,
        error,
        iterations: 1000 - iterations,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29sdXRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NvbHV0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpQkEsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDO0FBQzFCLE1BQU0sWUFBWSxHQUFHLENBQUMsQ0FBQztBQUN2QixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUM7QUFFNUIsTUFBTSxPQUFPLEtBQUs7SUFTRztJQVJWLElBQUksR0FBRyxPQUFPLENBQUM7SUFDZixHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ1IsSUFBSSxHQUFHLEdBQUcsQ0FBQztJQUNYLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDaEIsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNkLGFBQWEsR0FBRyxDQUFDLENBQUM7SUFDbEIsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUV6QixZQUFtQixJQUFZO1FBQVosU0FBSSxHQUFKLElBQUksQ0FBUTtJQUFHLENBQUM7SUFDbkMsS0FBSztRQUNILE9BQU8sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFDRCxJQUFJLFdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxJQUFJLEdBQUcsWUFBWSxDQUFDO0lBQ2xDLENBQUM7SUFDRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQztJQUNELElBQUksU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQixDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sS0FBSztJQVFHO0lBUFYsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNSLElBQUksR0FBRyxDQUFDLENBQUM7SUFDVCxXQUFXLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDZCxhQUFhLEdBQUcsQ0FBQyxDQUFDO0lBQ2xCLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFFekIsWUFB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VUFBVSxFQUFFLElBQUksR0FBRyxVQUFVO0tBQzlCLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW50ZXJmYWNlIENvbXBvbmVudERhdGEge1xuICBhYnY6IG51bWJlcjtcbiAgYnJpeDogbnVtYmVyO1xuICB2b2x1bWU6IG51bWJlcjtcbiAgbWFzczogbnVtYmVyO1xuICBzdWdhclZvbHVtZTogbnVtYmVyO1xuICB3YXRlclZvbHVtZTogbnVtYmVyO1xuICBhbGNvaG9sVm9sdW1lOiBudW1iZXI7XG4gIHN1Z2FyTWFzczogbnVtYmVyO1xuICB3YXRlck1hc3M6IG51bWJlcjtcbiAgYWxjb2hvbE1hc3M6IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIENvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudERhdGEge1xuICBjbG9uZSgpOiBDb21wb25lbnQ7XG59XG5cbmNvbnN0IHN1Z2FyRGVuc2l0eSA9IDEuNTk7XG5jb25zdCB3YXRlckRlbnNpdHkgPSAxO1xuY29uc3QgYWxjb2hvbERlbnNpdHkgPSAwLjc5O1xuXG5leHBvcnQgY2xhc3MgU3VnYXIgaW1wbGVtZW50cyBDb21wb25lbnQge1xuICByZWFkb25seSBuYW1lID0gJ1N1Z2FyJztcbiAgcmVhZG9ubHkgYWJ2ID0gMDtcbiAgcmVhZG9ubHkgYnJpeCA9IDEwMDtcbiAgcmVhZG9ubHkgd2F0ZXJWb2x1bWUgPSAwO1xuICByZWFkb25seSB3YXRlck1hc3MgPSAwO1xuICByZWFkb25seSBhbGNvaG9sVm9sdW1lID0gMDtcbiAgcmVhZG9ubHkgYWxjb2hvbE1hc3MgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBtYXNzOiBudW1iZXIpIHt9XG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgU3VnYXIodGhpcy5tYXNzKTtcbiAgfVxuICBnZXQgc3VnYXJWb2x1bWUoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFzcyAvIHN1Z2FyRGVuc2l0eTtcbiAgfVxuICBnZXQgdm9sdW1lKCkge1xuICAgIHJldHVybiB0aGlzLnN1Z2FyVm9sdW1lO1xuICB9XG4gIGdldCBzdWdhck1hc3MoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFzcztcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgV2F0ZXIgaW1wbGVtZW50cyBDb21wb25lbnQge1xuICByZWFkb25seSBhYnYgPSAwO1xuICByZWFkb25seSBicml4ID0gMDtcbiAgcmVhZG9ubHkgc3VnYXJWb2x1bWUgPSAwO1xuICByZWFkb25seSBzdWdhck1hc3MgPSAwO1xuICByZWFkb25seSBhbGNvaG9sVm9sdW1lID0gMDtcbiAgcmVhZG9ubHkgYWxjb2hvbE1hc3MgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB2b2x1bWU6IG51bWJlcikge31cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBXYXRlcih0aGlzLnZvbHVtZSk7XG4gIH1cbiAgZ2V0IHdhdGVyVm9sdW1lKCkge1xuICAgIHJldHVybiB0aGlzLnZvbHVtZTtcbiAgfVxuICBnZXQgd2F0ZXJNYXNzKCkge1xuICAgIHJldHVybiB0aGlzLndhdGVyVm9sdW1lICogd2F0ZXJEZW5zaXR5O1xuICB9XG4gIGdldCBtYXNzKCkge1xuICAgIHJldHVybiB0aGlzLndhdGVyTWFzcztcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRXRoYW5vbCBpbXBsZW1lbnRzIENvbXBvbmVudCB7XG4gIHJlYWRvbmx5IGFidiA9IDEwMDtcbiAgcmVhZG9ubHkgYnJpeCA9IDA7XG4gIHJlYWRvbmx5IHN1Z2FyVm9sdW1lID0gMDtcbiAgcmVhZG9ubHkgc3VnYXJNYXNzID0gMDtcbiAgcmVhZG9ubHkgd2F0ZXJWb2x1bWUgPSAwO1xuICByZWFkb25seSB3YXRlck1hc3MgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB2b2x1bWU6IG51bWJlcikge31cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBFdGhhbm9sKHRoaXMudm9sdW1lKTtcbiAgfVxuICBnZXQgYWxjb2hvbFZvbHVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy52b2x1bWU7XG4gIH1cbiAgZ2V0IGFsY29ob2xNYXNzKCkge1xuICAgIHJldHVybiB0aGlzLmFsY29ob2xWb2x1bWUgKiBhbGNvaG9sRGVuc2l0eTtcbiAgfVxuICBnZXQgbWFzcygpIHtcbiAgICByZXR1cm4gdGhpcy5hbGNvaG9sTWFzcztcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTWl4dHVyZTxUIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgQ29tcG9uZW50Pj4gaW1wbGVtZW50cyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihcbiAgICByZWFkb25seSBjb21wb25lbnRzOiBULFxuICApIHtcbiAgfVxuXG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgTWl4dHVyZTxUPihcbiAgICAgIE9iamVjdC5mcm9tRW50cmllcyhcbiAgICAgICAgT2JqZWN0LmVudHJpZXModGhpcy5jb21wb25lbnRzKS5tYXAoKFtrZXksIGNvbXBvbmVudF0pID0+IFtcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgY29tcG9uZW50LmNsb25lKCksXG4gICAgICAgIF0pLFxuICAgICAgKSBhcyBULFxuICAgICk7XG4gIH1cbiAgZ2V0IGFidigpIHtcbiAgICByZXR1cm4gMTAwICogdGhpcy5hbGNvaG9sVm9sdW1lIC8gdGhpcy52b2x1bWU7XG4gIH1cbiAgZ2V0IGJyaXgoKSB7XG4gICAgcmV0dXJuIDEwMCAqIHRoaXMuc3VnYXJNYXNzIC8gdGhpcy5tYXNzO1xuICB9XG4gIGdldCB2b2x1bWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3VtQ29tcG9uZW50cygndm9sdW1lJyk7XG4gIH1cbiAgZ2V0IHdhdGVyVm9sdW1lKCkge1xuICAgIHJldHVybiB0aGlzLnN1bUNvbXBvbmVudHMoJ3dhdGVyVm9sdW1lJyk7XG4gIH1cbiAgZ2V0IHdhdGVyTWFzcygpIHtcbiAgICByZXR1cm4gdGhpcy5zdW1Db21wb25lbnRzKCd3YXRlck1hc3MnKTtcbiAgfVxuICBnZXQgYWxjb2hvbFZvbHVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdW1Db21wb25lbnRzKCdhbGNvaG9sVm9sdW1lJyk7XG4gIH1cbiAgZ2V0IGFsY29ob2xNYXNzKCkge1xuICAgIHJldHVybiB0aGlzLnN1bUNvbXBvbmVudHMoJ2FsY29ob2xNYXNzJyk7XG4gIH1cbiAgZ2V0IHN1Z2FyVm9sdW1lKCkge1xuICAgIHJldHVybiB0aGlzLnN1bUNvbXBvbmVudHMoJ3N1Z2FyVm9sdW1lJyk7XG4gIH1cbiAgZ2V0IHN1Z2FyTWFzcygpIHtcbiAgICByZXR1cm4gdGhpcy5zdW1Db21wb25lbnRzKCdzdWdhck1hc3MnKTtcbiAgfVxuICBnZXQgbWFzcygpIHtcbiAgICByZXR1cm4gdGhpcy5zdW1Db21wb25lbnRzKCdtYXNzJyk7XG4gIH1cblxuICBwcml2YXRlIHN1bUNvbXBvbmVudHMoa2V5OiBrZXlvZiBDb21wb25lbnREYXRhKTogbnVtYmVyIHtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzLmNvbXBvbmVudHMpLnJlZHVjZShcbiAgICAgIChzdW0sIGNvbXBvbmVudCkgPT4gc3VtICsgY29tcG9uZW50W2tleV0sXG4gICAgICAwLFxuICAgICk7XG4gIH1cblxuICBhbmFseXplKHByZWNpc2lvbiA9IDApOiBUYXJnZXQgJiB7XG4gICAgbWFzczogbnVtYmVyO1xuICB9IHtcbiAgICByZXR1cm4ge1xuICAgICAgdm9sdW1lOiByb3VuZCh0aGlzLnZvbHVtZSwgcHJlY2lzaW9uKSxcbiAgICAgIG1hc3M6IHJvdW5kKHRoaXMubWFzcywgcHJlY2lzaW9uKSxcbiAgICAgIGFidjogcm91bmQodGhpcy5hYnYsIHByZWNpc2lvbiksXG4gICAgICBicml4OiByb3VuZCh0aGlzLmJyaXgsIHByZWNpc2lvbiksXG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiByb3VuZCh2YWx1ZTogbnVtYmVyLCBwcmVjaXNpb246IG51bWJlcikge1xuICBjb25zdCBmYWN0b3IgPSAxMCAqKiBwcmVjaXNpb247XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogZmFjdG9yKSAvIGZhY3Rvcjtcbn1cblxuZXhwb3J0IGNsYXNzIFN5cnVwIGV4dGVuZHMgTWl4dHVyZTx7IHdhdGVyOiBXYXRlcjsgc3VnYXI6IFN1Z2FyIH0+IHtcbiAgcHJpdmF0ZSBfdm9sdW1lOiBudW1iZXI7XG4gIHByaXZhdGUgX2JyaXg6IG51bWJlcjtcbiAgY29uc3RydWN0b3IoXG4gICAgYnJpeDogbnVtYmVyLFxuICAgIHZvbHVtZTogbnVtYmVyLFxuICApIHtcbiAgICBzdXBlcih7XG4gICAgICB3YXRlcjogbmV3IFdhdGVyKDApLFxuICAgICAgc3VnYXI6IG5ldyBTdWdhcigwKSxcbiAgICB9KTtcbiAgICB0aGlzLl92b2x1bWUgPSB2b2x1bWU7XG4gICAgdGhpcy5fYnJpeCA9IGJyaXg7XG4gICAgdGhpcy51cGRhdGVDb21wb25lbnRzKCk7XG4gIH1cblxuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IFN5cnVwKHRoaXMuX3ZvbHVtZSwgdGhpcy5fYnJpeCk7XG4gIH1cblxuICB1cGRhdGVDb21wb25lbnRzKCkge1xuICAgIHRoaXMuY29tcG9uZW50cy53YXRlciA9IG5ldyBXYXRlcih0aGlzLl92b2x1bWUgKiAoMSAtIHRoaXMuX2JyaXggLyAxMDApKTtcbiAgICB0aGlzLmNvbXBvbmVudHMuc3VnYXIgPSBuZXcgU3VnYXIodGhpcy5fdm9sdW1lICogKHRoaXMuX2JyaXggLyAxMDApKTtcbiAgfVxuXG4gIGdldCB2b2x1bWUoKSB7XG4gICAgcmV0dXJuIHN1cGVyLnZvbHVtZTtcbiAgfVxuXG4gIHNldCB2b2x1bWUodm9sdW1lOiBudW1iZXIpIHtcbiAgICB0aGlzLl92b2x1bWUgPSB2b2x1bWU7XG4gICAgdGhpcy51cGRhdGVDb21wb25lbnRzKCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFNwaXJpdCBleHRlbmRzIE1peHR1cmU8eyB3YXRlcjogV2F0ZXI7IGV0aGFub2w6IEV0aGFub2wgfT4ge1xuICBwcml2YXRlIF92b2x1bWU6IG51bWJlcjtcbiAgcHJpdmF0ZSBfYWJ2OiBudW1iZXI7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHZvbHVtZTogbnVtYmVyLFxuICAgIGFidjogbnVtYmVyLFxuICApIHtcbiAgICBzdXBlcih7XG4gICAgICB3YXRlcjogbmV3IFdhdGVyKDApLFxuICAgICAgZXRoYW5vbDogbmV3IEV0aGFub2woMCksXG4gICAgfSk7XG4gICAgdGhpcy5fdm9sdW1lID0gdm9sdW1lO1xuICAgIHRoaXMuX2FidiA9IGFidjtcbiAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudHMoKTtcbiAgfVxuXG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgU3Bpcml0KHRoaXMuX3ZvbHVtZSwgdGhpcy5fYWJ2KTtcbiAgfVxuXG4gIHVwZGF0ZUNvbXBvbmVudHMoKSB7XG4gICAgdGhpcy5jb21wb25lbnRzLndhdGVyID0gbmV3IFdhdGVyKHRoaXMuX3ZvbHVtZSAqICgxIC0gdGhpcy5fYWJ2IC8gMTAwKSk7XG4gICAgdGhpcy5jb21wb25lbnRzLmV0aGFub2wgPSBuZXcgRXRoYW5vbCh0aGlzLl92b2x1bWUgKiAodGhpcy5fYWJ2IC8gMTAwKSk7XG4gIH1cblxuICBnZXQgdm9sdW1lKCkge1xuICAgIHJldHVybiBzdXBlci52b2x1bWU7XG4gIH1cblxuICBzZXQgdm9sdW1lKHZvbHVtZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fdm9sdW1lID0gdm9sdW1lO1xuICAgIHRoaXMudXBkYXRlQ29tcG9uZW50cygpO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGFyZ2V0IHtcbiAgYWJ2OiBudW1iZXI7XG4gIGJyaXg6IG51bWJlcjtcbiAgdm9sdW1lOiBudW1iZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzb2x2ZShcbiAgc291cmNlU3Bpcml0OiBTcGlyaXQsXG4gIHRhcmdldEFidjogbnVtYmVyLFxuICB0YXJnZXRCcml4OiBudW1iZXIsXG4gIHNvdXJjZVN3ZWV0ZW5lckJyaXggPSAxMDAsIC8vIHB1cmUgc3VnYXJcbikge1xuICBpZiAodGFyZ2V0QWJ2ID4gc291cmNlU3Bpcml0LmFidikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBUYXJnZXQgQUJWICgke3RhcmdldEFidn0pIG11c3QgYmUgbGVzcyB0aGFuIHNvdXJjZSBBQlYgKCR7c291cmNlU3Bpcml0LmFidn0pYCxcbiAgICApO1xuICB9XG5cbiAgY29uc3Qgdm9sdW1lQXRUYXJnZXRBYnYgPSBzb3VyY2VTcGlyaXQuYWxjb2hvbFZvbHVtZSAvICh0YXJnZXRBYnYgLyAxMDApO1xuXG4gIGNvbnN0IG1peHR1cmUgPSBuZXcgTWl4dHVyZSh7XG4gICAgZXRoYW5vbDogc291cmNlU3Bpcml0LmNvbXBvbmVudHMuZXRoYW5vbC5jbG9uZSgpLFxuICAgIHdhdGVyOiBuZXcgV2F0ZXIodm9sdW1lQXRUYXJnZXRBYnYgKiAoMSAtIHRhcmdldEJyaXggLyAxMDApKSxcbiAgICBzdWdhcjogbmV3IFN1Z2FyKHZvbHVtZUF0VGFyZ2V0QWJ2ICogKHRhcmdldEJyaXggLyAxMDApKSxcbiAgfSk7XG5cbiAgY29uc3QgY29tcG9uZW50cyA9IG1peHR1cmUuY29tcG9uZW50cztcblxuICBsZXQgZXJyb3IgPSAxO1xuICBsZXQgaXRlcmF0aW9ucyA9IDEwMDA7XG4gIHdoaWxlIChlcnJvciA+IDAuMDEgJiYgLS1pdGVyYXRpb25zID4gMCkge1xuICAgIGNvbnN0IGRFcnJvcl9kQWJ2ID0gKHRhcmdldEFidiAtIG1peHR1cmUuYWJ2KSAvIDEwMDtcbiAgICBjb25zdCBkRXJyb3JfZEJyaXggPSAodGFyZ2V0QnJpeCAtIG1peHR1cmUuYnJpeCkgLyAxMDA7XG4gICAgY29uc3QgeyB2b2x1bWUsIG1hc3MgfSA9IG1peHR1cmU7XG5cbiAgICAvLyBpcyBhYnYgaXMgYmVsb3cgdGFyZ2V0LCB3ZSBuZWVkIGxlc3Mgd2F0ZXJcbiAgICBjb21wb25lbnRzLndhdGVyLnZvbHVtZSAtPSB2b2x1bWUgKiBkRXJyb3JfZEFidjtcbiAgICAvLyBpZiBicml4IGlzIGJlbG93IHRhcmdldCwgd2UgbmVlZCBtb3JlIHN1Z2FyXG4gICAgY29tcG9uZW50cy5zdWdhci5tYXNzICo9IDEgKyBkRXJyb3JfZEJyaXg7XG4gICAgLy8gaWYgYnJpeCBpcyBiZWxvdyB0YXJnZXQsIHdlIG5lZWQgbGVzcyB3YXRlclxuICAgIGNvbXBvbmVudHMud2F0ZXIudm9sdW1lIC09IG1hc3MgKiBkRXJyb3JfZEJyaXg7XG5cbiAgICAvLyBFbnN1cmUgY29tcG9uZW50IHZvbHVtZXMgYW5kIG1hc3Mgc3RheSB3aXRoaW4gdGhlIHZhbGlkIHJhbmdlXG4gICAgY29tcG9uZW50cy5ldGhhbm9sLnZvbHVtZSA9IE1hdGgubWluKFxuICAgICAgc291cmNlU3Bpcml0LmFsY29ob2xWb2x1bWUsXG4gICAgICBNYXRoLm1heCgwLCBjb21wb25lbnRzLmV0aGFub2wudm9sdW1lKSxcbiAgICApO1xuICAgIGNvbXBvbmVudHMud2F0ZXIudm9sdW1lID0gTWF0aC5tYXgoMCwgY29tcG9uZW50cy53YXRlci52b2x1bWUpO1xuICAgIGNvbXBvbmVudHMuc3VnYXIubWFzcyA9IE1hdGgubWF4KDAsIGNvbXBvbmVudHMuc3VnYXIubWFzcyk7XG5cbiAgICBlcnJvciA9IE1hdGguc3FydChcbiAgICAgIChtaXh0dXJlLmFidiAtIHRhcmdldEFidikgKiogMiArIChtaXh0dXJlLmJyaXggLSB0YXJnZXRCcml4KSAqKiAyLFxuICAgICk7XG4gIH1cblxuICAvLyBub3cgY29udmVydCB0aGUgdm9sdW1lIG9mIGV0aGFub2wgdG8gYW4gZXF1aXZhbGVudCB2b2x1bWUgb2Ygc3Bpcml0XG4gIGNvbnN0IHRhcmdldFNwaXJpdCA9IG5ldyBTcGlyaXQoXG4gICAgTWF0aC5yb3VuZChtaXh0dXJlLmFsY29ob2xWb2x1bWUgLyAoc291cmNlU3Bpcml0LmFidiAvIDEwMCkpLFxuICAgIHNvdXJjZVNwaXJpdC5hYnYsXG4gICk7XG4gIGNvbnN0IHRhcmdldFN5cnVwID0gbmV3IFN5cnVwKFxuICAgIHNvdXJjZVN3ZWV0ZW5lckJyaXgsXG4gICAgTWF0aC5yb3VuZCgxMDAgKiBtaXh0dXJlLnN1Z2FyTWFzcyAvIHNvdXJjZVN3ZWV0ZW5lckJyaXgpLFxuICApO1xuICBjb25zdCB0YXJnZXRXYXRlciA9IG5ldyBXYXRlcihcbiAgICBNYXRoLnJvdW5kKFxuICAgICAgbWl4dHVyZS53YXRlclZvbHVtZSAtIHRhcmdldFN5cnVwLndhdGVyVm9sdW1lIC0gdGFyZ2V0U3Bpcml0LndhdGVyVm9sdW1lLFxuICAgICksXG4gICk7XG5cbiAgY29uc3Qgb3V0cHV0ID0gbmV3IE1peHR1cmUoe1xuICAgIHNwaXJpdDogdGFyZ2V0U3Bpcml0LFxuICAgIHN5cnVwOiB0YXJnZXRTeXJ1cCxcbiAgICB3YXRlcjogdGFyZ2V0V2F0ZXIsXG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgbWl4dHVyZTogb3V0cHV0LFxuICAgIGVycm9yLFxuICAgIGl0ZXJhdGlvbnM6IDEwMDAgLSBpdGVyYXRpb25zLFxuICB9O1xufVxuIl19